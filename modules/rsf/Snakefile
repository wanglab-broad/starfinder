""" 
    This framework includes rules for running image registration across rounds and spot finding.
"""

from snakemake.utils import makedirs 
import os 
from os.path import join

configfile: "../../config/config.yaml"

## Define specific list of positions to run the pipeline for testing/re-runs
# for all tiles: 
TILES = [f"Position{str(x).zfill(3)}" for x in range(1,config['n_tiles']+1)] 
# for subset of tiles:
# TILES = [f"Position{str(x).zfill(3)}" for x in [1]] 

## TO-DO: once debugged, implement this fn to scale up resources in resubmissions of failed attempts
# def getMemoryMbs(rule, wildcards, attempt):

### NOTES:

# Wildcards need to be consistent across input and output for the same rule
# In most cases, the wildcard will be the tile name, but for local registration,
# there will be a second wildcard indicating subtile, constrained by "\d+"

# Each of these rules (except setup) are written to process just one file in order to run them in parallel for multiple
# file fitting the wildcard specification. 
# To run them all in order, run target rule "rsf" 

# helper function to output filepath string to registration outputs
def getOutpath(subdir):
    path = join(config['user_dir'], config['sample'], config['subdirs'][subdir])
    return path

rule rsf: # rule "all" requires final output as input and therefore runs every rule
    input: 
        # input for "all" is the desired end output of all rules
        expand("{outpath}/{tile}/goodPoints_dapi.tif", 
            outpath=getOutpath('registration'), 
            tile=TILES
        ),
        expand("{outpath}/{protein_round}/{protein_stain}/{tile}.tif", 
            outpath=getOutpath('registration'),
            protein_round=config['protein_round'],
            protein_stain=config['protein_stains'],
            tile = TILES
        )

rule setup:
    input: 
        tile_dir=f"/stanley/WangLab/Data/Processed/{config['sample']}" # data files in Data/Processed
    output: 
        symlink=directory(getOutpath('source_data')) # symlinks in projdir/01.data
    shell: 
        "ln -sf {input.tile_dir} {output.symlink}"

rule global_registration: 
    """
    """
    input: 
        # position directory in 01_data
        f"{getOutpath('source_data')}/round1/{{pos}}"
    output: 
        # round1 merged tiff 
        f"{getOutpath('registration')}/{{pos}}/interm/r1merged.tif",
        # registered images (.mat file) across rounds 
        # f"{getOutpath('registration')}/{{pos}}/interm/registeredImages.mat"
        # registered images split into subtiles
        expand("{outpath}/{{pos}}/interm/registeredImages_t{subtile}_{n_subtiles}.mat",
            outpath=getOutpath('registration'),
            subtile=range(1,config['sqrt_pieces']**2+1),
            n_subtiles=config['sqrt_pieces']**2,
        ),
        # coords_mat_{sqrt_pieces**2}.csv subtile configuration (logged here because it is generated as a byproduct)
        f"{getOutpath('registration')}/{{pos}}/interm/coords_mat_{config['sqrt_pieces']**2}.csv"
    resources: 
        mem_mb=config['resources']['global_registration']
    params: 
        mode="global_registration"
    script: 
        "scripts/rsf.py"

rule local_registration:
    """
    """
    input:
        # coords_mat subtile configuration
        f"{getOutpath('registration')}/{{pos}}/interm/coords_mat_{config['sqrt_pieces']**2}.csv",
        # registered images subtile
        f"{getOutpath('registration')}/{{pos}}/interm/registeredImages_t{{subtile,\d+}}_{config['sqrt_pieces']**2}.mat",
        # genes.csv file 
        f"{getOutpath('source_data')}/genes.csv"
    output:
        # goodPoints_{spotfinding_method}_t{subtile}.csv (spot-finding results for each subtile)
        f"{getOutpath('registration')}/{{pos}}/interm/goodPoints_{config['spotfinding_method']}_t{{subtile,\d+}}_{config['sqrt_pieces']**2}.csv"
    resources:
        mem_mb=config['resources']['local_registration']
    params: 
        mode="local_registration"
    script: 
        "scripts/rsf.py"

rule stitch:
    """
        Wildcard: pos = Position number
    """
    input:
        # coords_mat subtile configuration
        f"{getOutpath('registration')}/{{pos}}/interm/coords_mat_{config['sqrt_pieces']**2}.csv",
        # goodPoints_{spotfinding_method}_t{subtile}.csv (spot-finding results for each subtile)
        expand("{outpath}/{{pos}}/interm/goodPoints_{sf_method}_t{subtile}_{n_subtiles}.csv", 
            outpath=getOutpath('registration'), 
            sf_method=config['spotfinding_method'], 
            subtile=range(1,config['sqrt_pieces']**2+1),
            n_subtiles=config['sqrt_pieces']**2
        )
    output:
        # final spot-finding results for each position
        f"{getOutpath('registration')}/{{pos}}/goodPoints_{config['spotfinding_method']}.csv"
    resources:
        mem_mb=config['resources']['stitch']
    params:
        mode = "stitch"
    script: "scripts/rsf.py" 

rule plot_spot_finding:
    """
    """
    input:
        # DAPI image in reference round (round1)
        dapi=f"{getOutpath('source_data')}/round1/{{pos}}",
        # round1 merged tiff 
        r1max=f"{getOutpath('registration')}/{{pos}}/interm/r1merged.tif",
        # final spot-finding results for each position
        goodReads=f"{getOutpath('registration')}/{{pos}}/goodPoints_{config['spotfinding_method']}.csv"
    output:
        # goodPoints on DAPI
        goodPoints_dapi=f"{getOutpath('registration')}/{{pos}}/goodPoints_dapi.tif",
        # goodPoints on r1max
        goodPoints_r1max=f"{getOutpath('registration')}/{{pos}}/goodPoints_r1max.tif"
    resources:
        mem_mb=config['resources']['plot_spot_finding']
    script: "scripts/plot_rsf.py"

rule nuclei_protein_registration:
    """
    """
    input:
        # Protein round 
        dapi=directory(f"{getOutpath('source_data')}/{config['protein_round']}/{{pos}}/")
    output:
        # Registered protein images 
        expand("{outpath}/{protein_round}/{protein_stain}/{{pos}}.tif", 
            outpath=getOutpath('registration'),
            protein_round=config['protein_round'],
            protein_stain=config['protein_stains']
        )
    wildcard_constraints:
        pos = '\w+'
    resources:
        mem_mb=config['resources']['nuclei_protein_registration']
    params:
        mode = "nuclei_protein_registration"
    script: "scripts/rsf.py"
